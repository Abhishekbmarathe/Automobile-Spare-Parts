<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>nuts and bolts</title>
    <!-- Link to external CSS file -->
    <link rel="stylesheet" type="text/css" href="styles/style2.css">
    <!-- Link to Razorpay checkout script -->
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        /* Styling for the body */
        body {
            font-family: 'Arial', sans-serif;
            background-color: #c0bdbd;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            overflow: hidden;
            position: relative;
        }

        /* Styling for the form container */
        .form-container {
            background-color: rgba(206, 200, 200, 0.3);
            padding: 20px;
            border-radius: 8px;
            box-shadow: rgba(0, 0, 0, 0.70) 5px 3px 8px;
            width: 100%;
            max-width: 500px;
            z-index: 10;
            position: relative;
        }

        h1 {
            color: #040404;
            text-align: center;
        }

        label {
            display: block;
            margin-top: 10px;
            color: #333;
        }

        /* Styling for input fields */
        input[type="text"],
        input[type="email"],
        input[type="tel"],
        textarea {
            width: 100%;
            padding: 8px;
            margin-top: 5px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
            /* Ensures padding does not affect width */
        }

        .size {
            margin-top: 5px;
            display: flex;
            justify-content: space-between;
        }

        input[type="radio"] {
            margin-right: 5px;
        }

        button {
            display: block;
            width: 100%;
            padding: 10px;
            background-color: #007BFF;
            color: white;
            border: none;
            border-radius: 4px;
            margin-top: 20px;
            cursor: pointer;
        }

        button:hover {
            background-color: #0056b3;
        }

        @media (max-width: 600px) {
            .form-container {
                margin: 20px;
            }
        }

        select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            background-color: #fff;
            margin-top: 5px;
        }

        fieldset {
            border: 1px solid #ccc;
            padding: 10px;
            margin-top: 20px;
        }

        legend {
            padding: 0 5px;
            color: #333;
        }

        label {
            display: block;
            margin-top: 10px;
        }

        input[type="radio"] {
            margin-right: 10px;
        }

        /* Background animation styling */
        .context {
            width: 100%;
            position: absolute;
            top: 50vh;
        }

        .context h1 {
            text-align: center;
            color: #fff;
            font-size: 50px;
        }

        .area {
            background: rgb(20, 180, 255);
            background: -webkit-linear-gradient(to left, #8f94fb, rgb(20, 180, 255));
            width: 100%;
            height: 100vh;
            position: absolute;
            top: 0;
            left: 0;
            z-index: 1;
        }

        .circles {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            z-index: 0;
        }

        .circles li {
            position: absolute;
            display: block;
            list-style: none;
            width: 20px;
            height: 20px;
            background: rgba(255, 255, 255, 0.2);
            animation: animate 25s linear infinite;
            bottom: -150px;
        }

        .circles li:nth-child(1) {
            left: 25%;
            width: 80px;
            height: 80px;
            animation-delay: 0s;
        }

        .circles li:nth-child(2) {
            left: 10%;
            width: 20px;
            height: 20px;
            animation-delay: 2s;
            animation-duration: 12s;
        }

        .circles li:nth-child(3) {
            left: 70%;
            width: 20px;
            height: 20px;
            animation-delay: 4s;
        }

        .circles li:nth-child(4) {
            left: 40%;
            width: 60px;
            height: 60px;
            animation-delay: 0s;
            animation-duration: 18s;
        }

        .circles li:nth-child(5) {
            left: 65%;
            width: 20px;
            height: 20px;
            animation-delay: 0s;
        }

        .circles li:nth-child(6) {
            left: 75%;
            width: 110px;
            height: 110px;
            animation-delay: 3s;
        }

        .circles li:nth-child(7) {
            left: 35%;
            width: 150px;
            height: 150px;
            animation-delay: 7s;
        }

        .circles li:nth-child(8) {
            left: 50%;
            width: 25px;
            height: 25px;
            animation-delay: 15s;
            animation-duration: 45s;
        }

        .circles li:nth-child(9) {
            left: 20%;
            width: 15px;
            height: 15px;
            animation-delay: 2s;
            animation-duration: 35s;
        }

        .circles li:nth-child(10) {
            left: 85%;
            width: 150px;
            height: 150px;
            animation-delay: 0s;
            animation-duration: 11s;
        }

        @keyframes animate {
            0% {
                transform: translateY(0) rotate(0deg);
                opacity: 1;
                border-radius: 0;
            }

            100% {
                transform: translateY(-1000px) rotate(720deg);
                opacity: 0;
                border-radius: 50%;
            }
        }
    </style>
</head>

<body>

    <!-- Background animation area -->
    <div class="area">
        <ul class="circles">
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
        </ul>
    </div>



    <!-- Form container -->
    <div class="form-container">
        <h1>Place Your Order</h1>
        <form id="food-order-form">
            <!-- Name input -->
            <label for="name">Name:</label>
            <input type="text" id="name" name="name" required>

            <!-- Email input -->
            <label for="email">Email:</label>
            <input type="email" id="email" name="email" required>

            <!-- Phone input -->
            <label for="phone">Phone:</label>
            <input type="tel" id="phone" name="phone" required>

            <!-- Payment method selection -->
            <fieldset>
                <legend>Payment Method:</legend>
                <label><input type="radio" name="payment" value="credit_debit" required>make online payment</label>
                <label><input type="radio" name="payment" checked value="cash"> Cash on delivery</label>
            </fieldset>

            <!-- Address input -->
            <label for="address">Address:</label>
            <textarea id="address" name="address" rows="4" required></textarea>

            <!-- Submit and payment buttons -->
            <button type="submit" id="submitOrderBtn">Submit Order</button>
            <button type="button" id="payBtn">Pay with Razorpay</button>
        </form>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const paymentMethods = document.getElementsByName('payment');
            const submitBtn = document.getElementById('submitOrderBtn');
            const payBtn = document.getElementById('payBtn');

            // Function to toggle the visibility of submit and pay buttons based on selected payment method
            function togglePaymentButton() {
                const isCreditDebit = document.querySelector('input[name="payment"]:checked').value === "credit_debit";
                submitBtn.style.display = isCreditDebit ? 'none' : 'inline';
                payBtn.style.display = isCreditDebit ? 'inline' : 'none';
            }

            // Add event listener to each payment method radio button
            paymentMethods.forEach(function (payment) {
                payment.addEventListener('change', togglePaymentButton);
            });

            togglePaymentButton();  // Initial check on page load
        });

        // Add event listener to the form to handle submission
        document.getElementById('food-order-form').addEventListener('submit', function (event) {
            event.preventDefault(); // Prevent default form submission
            if (!confirm('Are you sure you want to submit this order?')) {
                alert('Order submission cancelled.');
                return; // Exit the function if the user cancels
            }
            submitOrderForm();
        });

        // Function to handle form submission
        function submitOrderForm() {
            if (!localStorage.getItem('userId')) {
                // event.preventDefault();
                alert("please login or signup to proceed...");
                sessionStorage.clear();
                // const form = document.getElementById('food-order-form').reset();

                return; // Stop function execution if userId is not found
            }
            const form = document.getElementById('food-order-form');
            form.setAttribute('action', '/submit'); // Set the action to the desired URL
            form.setAttribute('method', 'post'); // Set the method to POST

            // Append additional data from localStorage if needed
            const spareItems = JSON.parse(sessionStorage.getItem('spareItems') || '[]');
            spareItems.forEach((item) => {
                appendHiddenInput(form, 'itemName', item.name);
                appendHiddenInput(form, 'price', item.price);
                appendHiddenInput(form, 'userId', localStorage.getItem('userId'));
            });

            form.submit(); // Submit the form
            sessionStorage.clear(); // Clear localStorage after submission
        }

        // Function to append hidden input fields to the form
        function appendHiddenInput(form, name, value) {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = name;
            input.value = value;
            form.appendChild(input);
        }

        // Add event listener to the pay button to initiate Razorpay payment
        document.getElementById('payBtn').addEventListener('click', async () => {
            if (!localStorage.getItem('userId')) {
                // event.preventDefault();
                alert("please login or signup to proceed...");
                // const form = document.getElementById('food-order-form').reset();

                return; // Stop function execution if userId is not found
            }
            const orderItems = JSON.parse(sessionStorage.getItem('spareItems'));
            let totalAmount = parseFloat(orderItems[orderItems.length - 1].price);
            const name = orderItems[orderItems.length - 1].name;
            const email = document.querySelector('input[name="email"]').value;
            const cname = document.querySelector('#name').value;
            const contact = document.querySelector('#phone').value;

            // Fetch order data from the server
            const orderResponse = await fetch('/create-order', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ amount: totalAmount }) // Adjust the amount as necessary
            });

            const orderData = await orderResponse.json();

            // Razorpay payment options
            var options = {
                "key": "rzp_test_rZ9XdkGjHcXsd6", // Replace this with your actual Razorpay key ID
                "amount": totalAmount * 100,
                "currency": "INR",
                "name": name,
                "description": "Test Transaction",
                "image": "https://example.com/your_logo",
                "order_id": orderData.id,
                "handler": function (response) {
                    alert("Payment successful. Payment ID: " + response.razorpay_payment_id);
                    // Optionally verify the payment
                    submitOrderForm();
                    verifyPayment(response.razorpay_order_id, response.razorpay_payment_id, response.razorpay_signature);
                },
                "prefill": {
                    "name": cname,
                    "email": email,
                    "contact": contact
                },
                "theme": {
                    "color": "#F37254"
                }
            };
            var paymentObject = new Razorpay(options);
            paymentObject.open();
        });

        // Function to verify payment on the server
        function verifyPayment(orderId, paymentId, signature) {
            fetch('/verify-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    razorpay_order_id: orderId,
                    razorpay_payment_id: paymentId,
                    razorpay_signature: signature
                })
            }).then(response => response.json())
                .then(data => console.log(data))
                .catch(error => console.error('Payment verification failed', error));
        }
    </script>
</body>

</html>